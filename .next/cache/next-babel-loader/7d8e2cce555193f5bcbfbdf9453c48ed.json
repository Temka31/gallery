{"ast":null,"code":"var _jsxFileName = \"/Users/tema/gallery/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Row from \"../components/row\";\nimport Card from \"../components/card\";\nimport { useState } from \"react\";\nconst styles = {\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    height: \"100%\"\n  }\n};\nexport default function Index() {\n  const {\n    0: url,\n    1: setUrl\n  } = useState(\"https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=mouse\");\n  const {\n    0: items,\n    1: setItems\n  } = useState([]);\n  const {\n    0: tags,\n    1: setTags\n  } = useState([]);\n  const {\n    0: group,\n    1: setGroup\n  } = useState(false);\n  const {\n    0: tag,\n    1: setTag\n  } = useState(\"\");\n\n  const handleClickLoading = tag => {\n    fetch(\"https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=\" + tag).then(response => response.json()).then(data => {\n      if (\"data\" in data) {\n        if (\"embed_url\" in data.data) {\n          setItems([...items, {\n            tag: tag,\n            url: data.data.embed_url\n          }]);\n          addTag(tag);\n        } else {\n          alert(\"По тегу ничего не найдено\");\n        }\n      } else {\n        alert(\"Произошла http ошибка\");\n      }\n    });\n  };\n\n  const addTag = tag => {\n    if (!tags.includes(tag)) {\n      setTags([...tags, tag]);\n    }\n  };\n\n  const handleClickClear = () => {\n    setItems([]);\n  };\n\n  const handelClickGroup = () => {\n    setGroup(!group);\n  };\n\n  const renderCards = () => {\n    if (items.length > 0) {\n      return __jsx(\"div\", {\n        style: styles.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, items.map(item => __jsx(Card, {\n        item: item,\n        key: item.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      })));\n    }\n  };\n\n  const renderCardsGroup = () => {\n    if (items.length > 0) return tags.map(tag => __jsx(\"div\", {\n      style: styles.root,\n      key: tag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, tag, items.map(item => {\n      if (tag === item.tag) {\n        return __jsx(Card, {\n          item: item,\n          key: item.url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        });\n      }\n    })));\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(Row, {\n    onClickLoading: handleClickLoading,\n    onClickClear: handleClickClear,\n    onClickGroup: handelClickGroup,\n    group: group,\n    tag: tag,\n    setTag: setTag,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), group ? renderCardsGroup() : renderCards(), console.log(items), console.log(tags));\n}","map":{"version":3,"sources":["/Users/tema/gallery/pages/index.js"],"names":["Row","Card","useState","styles","root","display","flexWrap","height","Index","url","setUrl","items","setItems","tags","setTags","group","setGroup","tag","setTag","handleClickLoading","fetch","then","response","json","data","embed_url","addTag","alert","includes","handleClickClear","handelClickGroup","renderCards","length","map","item","renderCardsGroup","console","log"],"mappings":"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","sourcesContent":["import Row from \"../components/row\";\nimport Card from \"../components/card\";\nimport { useState} from \"react\";\n\nconst styles = {\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      height: \"100%\",\n    },}\n\n\nexport default function Index() {\n  const [url, setUrl] = useState(\n    \"https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=mouse\"\n  );\n  const [items, setItems] = useState([]);\n  const [tags, setTags] = useState([]);\n  const [group, setGroup] = useState(false);\n  const [tag, setTag] = useState(\"\");\n\n  const handleClickLoading = tag => {\n    fetch(\n      \"https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=\" + tag\n    )\n      .then(response => response.json())\n      .then(data => {\n        if (\"data\" in data) {\n          if (\"embed_url\" in data.data) {\n            setItems([...items, { tag: tag, url: data.data.embed_url }]);\n            addTag(tag);\n          } else {\n            alert(\"По тегу ничего не найдено\");\n          }\n        } else {\n          alert(\"Произошла http ошибка\");\n        }\n      });\n  };\n\n  const addTag = tag => {\n    if (!tags.includes(tag)) {\n      setTags([...tags, tag]);\n    }\n  };\n\n  const handleClickClear = () => {\n    setItems([]);\n  };\n  const handelClickGroup = () => {\n    setGroup(!group);\n  };\n\n  const renderCards = () => {\n    if (items.length > 0) {\n      return <div style={styles.root}>{items.map(item => <Card item={item} key={item.url} />)}</div>\n    }\n  };\n\n  const renderCardsGroup = () => {\n    if (items.length > 0)\n      return tags.map(tag => (\n        <div style={styles.root} key={tag}>\n          {tag}\n          {items.map(item => {\n            if (tag === item.tag) {\n              return <Card item={item} key={item.url} />;\n            }\n          })}\n        </div>\n      ));\n  };\n\n  return (\n    <div>\n      <Row\n        onClickLoading={handleClickLoading}\n        onClickClear={handleClickClear}\n        onClickGroup={handelClickGroup}\n        group={group}\n        tag={tag}\n        setTag={setTag}\n      />\n      {group ? renderCardsGroup() : renderCards()}\n      {console.log(items)}\n      {console.log(tags)}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}