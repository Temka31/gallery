{"ast":null,"code":"var _jsxFileName = \"/Users/tema/gallery/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Row from \"../components/row\";\nimport Card from \"../components/card\";\nimport { useState, useMemo, useEffect } from \"react\";\nexport default function Index() {\n  const {\n    0: url,\n    1: setUrl\n  } = useState(\"https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=mouse\");\n  const {\n    0: resItem,\n    1: setResItem\n  } = useState({});\n  const {\n    0: items,\n    1: setItems\n  } = useState({});\n\n  const handleClickLoading = () => {\n    fetch(url).then(response => response.json()).then(data => setResItem(data));\n  };\n\n  useMemo(() => {\n    if (\"data\" in resItem) setItems({\n      \"type\": \"cat\",\n      \"url\": resItem.data.embed_url\n    });\n  }, [resItem]);\n\n  const handleClickClear = () => {\n    alert(\"Clear\");\n  };\n\n  const handelClickGroup = () => {\n    alert(\"Group\");\n  };\n\n  const renderCards = () => {\n    if (\"url\" in items) return items.map(item => __jsx(Card, {\n      item: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(Row, {\n    onClickLoading: handleClickLoading,\n    onClickClear: handleClickClear,\n    onClickGroup: handelClickGroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), renderCards(), console.log(items));\n}","map":{"version":3,"sources":["/Users/tema/gallery/pages/index.js"],"names":["Row","Card","useState","useMemo","useEffect","Index","url","setUrl","resItem","setResItem","items","setItems","handleClickLoading","fetch","then","response","json","data","embed_url","handleClickClear","alert","handelClickGroup","renderCards","map","item","console","log"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,mBAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,SAA5B,QAA6C,OAA7C;AAEA,eAAe,SAASC,KAAT,GAAiB;AAC9B,QAAM;AAAA,OAACC,GAAD;AAAA,OAAMC;AAAN,MAAgBL,QAAQ,CAC5B,sEAD4B,CAA9B;AAGA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAkBT,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMU,kBAAkB,GAAG,MAAM;AAC/BC,IAAAA,KAAK,CAACP,GAAD,CAAL,CACCQ,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAIR,UAAU,CAACQ,IAAD,CAFxB;AAID,GALD;;AAOAd,EAAAA,OAAO,CAAC,MAAM;AACZ,QAAI,UAAUK,OAAd,EACAG,QAAQ,CAAE;AAAC,cAAO,KAAR;AAAc,aAAMH,OAAO,CAACS,IAAR,CAAaC;AAAjC,KAAF,CAAR;AACD,GAHM,EAGJ,CAACV,OAAD,CAHI,CAAP;;AAKA,QAAMW,gBAAgB,GAAG,MAAM;AAC7BC,IAAAA,KAAK,CAAC,OAAD,CAAL;AACD,GAFD;;AAGA,QAAMC,gBAAgB,GAAG,MAAM;AAC7BD,IAAAA,KAAK,CAAC,OAAD,CAAL;AACD,GAFD;;AASA,QAAME,WAAW,GAAG,MAAM;AACxB,QAAG,SAAQZ,KAAX,EACA,OAAQA,KAAK,CAACa,GAAN,CAAUC,IAAI,IAClB,MAAC,IAAD;AAAM,MAAA,IAAI,EAAEA,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADI,CAAR;AAID,GAND;;AAUA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AACE,IAAA,cAAc,EAAEZ,kBADlB;AAEE,IAAA,YAAY,EAAEO,gBAFhB;AAGE,IAAA,YAAY,EAAEE,gBAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAMGC,WAAW,EANd,EAOGG,OAAO,CAACC,GAAR,CAAYhB,KAAZ,CAPH,CADF;AAWD","sourcesContent":["import Row from \"../components/row\";\nimport Card from \"../components/card\";\nimport { useState, useMemo, useEffect } from \"react\";\n\nexport default function Index() {\n  const [url, setUrl] = useState(\n    \"https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=mouse\"\n  );\n  const [resItem, setResItem] = useState({});\n  const [items, setItems]=useState({});\n\n  const handleClickLoading = () => {\n    fetch(url)\n    .then(response => response.json())\n    .then(data => setResItem(data));\n    \n  };\n\n  useMemo(() => {\n    if (\"data\" in resItem)\n    setItems ({\"type\":\"cat\",\"url\":resItem.data.embed_url})\n  }, [resItem]);\n\n  const handleClickClear = () => {\n    alert(\"Clear\");\n  };\n  const handelClickGroup = () => {\n    alert(\"Group\");\n  };\n\n\n  \n  \n\n\n  const renderCards = () => {\n    if(\"url\"in items)\n    return (items.map(item => (\n        <Card item={item}/>\n      )))\n    \n  };\n\n\n\n  return (\n    <div>\n      <Row\n        onClickLoading={handleClickLoading}\n        onClickClear={handleClickClear}\n        onClickGroup={handelClickGroup}\n      />\n      {renderCards()}\n      {console.log(items)}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}